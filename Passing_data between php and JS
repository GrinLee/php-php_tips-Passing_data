  // 1. Use AJAX to get the data you need from the server
    // This method is considered the best, because your server side and client side scripts are completely separate.
    // **Pros
    //     Better separation between layers - If tomorrow you stop using PHP, and want to move to a servlet, a REST API, or some other service, you don't have to change much of the JavaScript code.
    //     More readable - JavaScript is JavaScript, PHP is PHP. Without mixing the two, you get more readable code on both languages.
    //     Allows for asynchronous data transfer - Getting the information from PHP might be time/resources expensive. Sometimes you just don't want to wait for the information, load the page, and have the information reach whenever.
    //     Data is not directly found on the markup - This means that your markup is kept clean of any additional data, and only JavaScript sees it.
    // **Cons
    //     Latency - AJAX creates an HTTP request, and HTTP requests are carried over network and have network latencies.
    //     State - Data fetched via a separate HTTP request won't include any information from the HTTP request that fetched the HTML document. You may need this information (e.g., if the HTML document is generated in response to a form submission) and, if you do, will have to transfer it across somehow. If you have ruled out embedding the data in the page (which you have if you are using this technique) then that limits you to cookies/sessions which may be subject to race conditions.'

        // [get-data.php]------------------
            echo json_encode(42); 

        // [index.php]------------------
            <script>
                function reqListener () {
                  console.log(this.responseText);
                }
                var oReq = new XMLHttpRequest(); 
                oReq.onload = function() {
                    alert(this.responseText);       // Will alert: 42
                };
                oReq.open("get", "get-data.php", true);
                oReq.send();
            </script>

    // ------------------------------------------------------------------------
    // 2. Echo the data into the page somewhere, and use JavaScript to get the information from the DOM
    //     This method is less preferable to AJAX, but it still has its advantages. It's still relatively separated between PHP and JavaScript in a sense that there is no PHP directly in the JavaScript.'
    //     ** Pros
    //         Fast - DOM operations are often quick, and you can store and access a lot of data relatively quickly.
    //     ** Cons
    //         Potentially Unsemantic Markup - Usually, what happens is that you use some sort of <input type=hidden> to store the information, because it's easier to get the information out of inputNode.value, but doing so means that you have a meaningless element in your HTML. HTML has the <meta> element for data about the document, and HTML 5 introduces data-* attributes for data specifically for reading with JavaScript that can be associated with particular elements.
    //         Dirties up the Source - Data that PHP generates is outputted directly to the HTML source, meaning that you get a bigger and less focused HTML source.
    //         Harder to get structured data - Structured data will have to be valid HTML, otherwise you'll have to escape and convert strings yourself.
    //         Tightly couples PHP to your data logic - Because PHP is used in presentation, you can't separate the two cleanly.

    //         [index.php]------------------

                <div id="dom-target" style="display: none;">
                    <?php
                        $output = "42"; 
                        echo htmlspecialchars($output);  
                    ?>
                </div>

                <script>
                    var div = document.getElementById("dom-target");
                    var myData = div.textContent;
                </script.>             

    // -----------------------------------------------------------------------
    // 3. Echo the data directly to JavaScript
    //     This is probably the easiest to understand.
    //     **Pros
    //         Very easily implemented - It takes very little to implement this, and understand.
    //         Does not dirty source - Variables are outputted directly to JavaScript, so the DOM is not affected.
    //     **Cons
    //         Tightly couples PHP to your data logic - Because PHP is used in presentation, you can't separate the two cleanly.'


    //     [index.php]------------------
            <script>
                var data = <?php echo json_encode("42", JSON_HEX_TAG); ?>;  
            </script.>


    //     [".$id."] join (tag + php) ------------------
            
            <img src="<?php echo "img/".$prd['id']; ?>" style="width:70px" /></td>



    // 4. other simple solution ------------------------------------------------------

        // [Jquery]---------------------
        <div class="service-container"
            data-service="<?= htmlspecialchars($myService->getValue()) ?>">
        </div>

        <script>
            $(document).ready(function() {
                $('.service-container').each(function() {
                    var container = $(this);
                    var service = container.data('service');
                });
            });
        </script.>

        // [ echo inside within tags ]------------------------------------------------------

        <script type="text/javascript">
            var data = <?php echo json_encode($php_variable); ?>; 
        </script.>

        // [ echo J.S tags ]------------------------------------------------------
        <?php
            echo "<script> var data = " . json_encode($php_variable) . "</script>";
        ?>
